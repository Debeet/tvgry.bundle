# -*- coding: utf-8 -*-

BASE_URL = 'http://tvgry.pl'
METADATA_URL = '%s/video/source.v2.asp?SC=TV&id=' % (BASE_URL)
USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36'

def MetadataObjectForURL(url):

	months = [('stycznia', 'January'), ('lutego', 'February'), ('marca', 'March'), ('kwietnia', 'April'), ('maja', 'May'), ('czerwca', 'June'), ('lipca', 'July'), ('sierpnia', 'August'), ('września', 'September'), ('października', 'October'), ('listopada', 'November'), ('grudnia', 'December')]

	# Request the URL
	page = HTML.ElementFromURL(url, encoding = 'cp1250', cacheTime = CACHE_1WEEK, headers = {'User-Agent': USER_AGENT})
	
	# Extract the details available directly form the page.
	title = page.xpath("//h2")[0].text_content()
	tagline = page.xpath("//p[@class='lead']")[0].text_content()
	summary = page.xpath("//p[@class='short-desc']")[0].text_content()
	thumb = page.xpath("//link[@rel='image_src']")[0].get('href')
	art = thumb.replace('N640', 'N1280')
	tags = page.xpath("//p[@class='topics']")
	tags_list = []
	if (len(tags) > 0):
		for tag in tags:
			tags_list.append(tag.text_content())
	likes = float(page.xpath("//a[@class='plus']")[0].text_content())
	dislikes = float(page.xpath("//a[@class='minus']")[0].text_content())
	rating = abs((dislikes / likes * 10) - 10)
	duration = page.xpath("//div[@class='description']/p[3]/span[3]/span[1]")[0].text_content().split(':')
	duration_ms = (int(duration[0]) * 60 + int(duration[1])) * 1000

	originally_available_at = page.xpath("//div[@class='description']/p[3]/span[2]/span[1]")[0].text_content()
	
	for search, replace in months:
		originally_available_at = originally_available_at.replace(search, replace)
	
	originally_available_at = Datetime.ParseDate(originally_available_at).date()

	return VideoClipObject(
		title = title,
		tagline = tagline,
		summary = summary,
		thumb = art,
		art = art,
		tags = tags_list,
		rating = rating,
		duration = duration_ms,
		originally_available_at = originally_available_at)

def MediaObjectsForURL(url):

	return [
		MediaObject(
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = 1080,
			video_codec = VideoCodec.H264,
			container = 'mp4',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url = url, format = '1080p'))]
		),
		MediaObject(
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = 720,
			video_codec = VideoCodec.H264,
			container = 'mp4',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url = url, format = '720p'))]
		),
		MediaObject(
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = 540,
			video_codec = VideoCodec.H264,
			container = 'mp4',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url = url, format = 'SD'))]
		),
		MediaObject(
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			video_resolution = 360,
			video_codec = VideoCodec.H264,
			container = 'mp4',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url = url, format = 'Mobile'))]
		)
	]
	
def PlayVideo(url, format):

	clip_id = url[20:]
	
	# Request the URL
	page = XML.ElementFromURL(METADATA_URL + clip_id, encoding = 'cp1250', cacheTime = CACHE_1DAY, headers = {'User-Agent': USER_AGENT})

	if (format == '1080p'):
		index = -1
		# 1080p isn't always available
		if (page.xpath("//*[name()='jwplayer:xl']")[0].text != '1'):
			index = -2
	elif (format == '720p'):
		index = -2
	elif (format == 'SD'):
		index = -3
	elif (format == 'Mobile'):
		index = -4
	else:
		index = -3

	# Get the video URL
	video_url = page.xpath("//*[name()='jwplayer:source']")[index].get('file')

	return Redirect(video_url)